#!/usr/local/bin/python
import byu_ws_sdk as byu_ws
import requests
import datetime
import json
import SOAPpy
import subprocess
import os
import sys

def _get_now_str():
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def _slack_notify(msg):
    exit_code = subprocess.call("./codeship/slack_say {}".format(msg), shell=True)
    return exit_code == 0

def _rfc_notify(rfc_change_sys_id, rfc_number, msg):
    full_message = "%s deployment: <https://%s/nav_to.do?uri=change_request.do?sys_id=%s|%s> %s" % (os.environ["REPO_NAME"], "it.byu.edu", rfc_change_sys_id, rfc_number, msg)
    _slack_notify(full_message)

def create_rfc():
    proxy = 'https://%s:%s@%s/Standard_Change.do?SOAP' % (os.environ["SERVICENOW_USERNAME"], os.environ["SERVICENOW_PASSWORD"], "it.byu.edu")
    server = SOAPpy.SOAPProxy(proxy, 'http://www.service-now.com')
    try:
        rfc = server.execute(template_id=["SERVICENOW_RFC_TEMPLATE_ID"], short_description="{} - {}".format(os.environ["CI_MESSAGE"], os.environ["CI_COMMIT_ID"]))
    except Exception as e:
        print(str(e))
        return False

    try:
        if (rfc.status != 'Inserted'):
            print(rfc.status)
            return False
    except AttributeError as e:
        print(str(rfc))
        print(str(e))
        return False

    now = _get_now_str()
    if not _update_rfc({'sys_id': rfc.change_sys_id, 'state': 20, 'work_start': now, 'u_requested_date': now}):
        return False
    _rfc_notify(rfc.change_sys_id, rfc.number, 'started')
    open("/steps/rfc_change_sys_id", "w").write(rfc.change_sys_id)
    open("/steps/rfc_number", "w").write(rfc.number)
    return True

def close_rfc():
    rfc_change_sys_id = open("/steps/rfc_change_sys_id").read()
    rfc_number = open("/steps/rfc_number").read()
    now = _get_now_str()
    success = _update_rfc({'sys_id': rfc_change_sys_id, 'state': 50, 'work_end': now, 'u_completion_rating': 1})
    if success:
        _rfc_notify(rfc_change_sys_id, rfc_number, 'closed successfully')
    return success

def fail_rfc():
    rfc_change_sys_id = open("/steps/rfc_change_sys_id").read()
    rfc_number = open("/steps/rfc_number").read()
    msg = sys.argv[2]
    now = _get_now_str()
    success = _update_rfc({
            'sys_id': rfc_change_sys_id,
            'state': 50,
            'work_end': now,
            'u_failure_start': now,
            'u_failure_end': now,
            'u_task_work_log': msg,
            'u_completion_rating': 5})
    if success:
        _rfc_notify(rfc_change_sys_id, rfc_number, 'closed as failure')
    return success

def _update_rfc(parameters):
    proxy = 'https://%s:%s@%s/change_request.do?SOAP' % (os.environ["SERVICENOW_USERNAME"], os.environ["SERVICENOW_PASSWORD"], "it.byu.edu")
    server = SOAPpy.SOAPProxy(proxy, 'http://www.service-now.com')
    try:
        response = server.update(**parameters)
    except Exception as e:
        print(str(e))
        return False
    return True

def main():
    if sys.argv[1] == "open":
        create_rfc()
    elif sys.argv[1] == "close":
        close_rfc()
    elif sys.argv[1] == "fail":
        fail_rfc()
    else:
        sys.stderr.write("Invalid command '{}', must be one of 'open', 'close' or 'fail'.\n".format(sys.argv[1]))

if __name__ == '__main__':
    main()
